name: Pre-release using cross build

on:
  push:
    branches:
      - dev
    #paths:
    #  - 'release-versions/*'
env:
  CARGO_TERM_COLOR: always

jobs:
  publish-with-crossbuild:
    name: Publish to Github
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: aarch64
            os: ubuntu-18.04
            target: aarch64-unknown-linux-gnu
            linker: gcc-aarch64-linux-gnu
            use-cross: true
            asset_name: meilisearch-linux-aarch64
          - build: linux
            os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            use-cross: false
            asset_name: meilisearch-linux-x86_64
          - build: aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            linker: gcc-aarch64-linux-gnu
            use-cross: true
            asset_name: meilisearch-linux-aarch64-musl
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
            asset_name: meilisearch-linux-x86_64-musl
    
    steps:

      - name: Fetch branch name of latest pre-release version
        run: |
          curl -sL https://api.github.com/repos/meilisearch/MeiliSearch/releases | \
          jq -r "map(select(.prerelease)) | first | .tag_name" > /tmp/meilisearch-latest-branch-name
          echo "REMOTE_BRANCH_NAME=$(cat /tmp/meilisearch-latest-branch-name)" >> $GITHUB_ENV
          
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: meilisearch/MeiliSearch
          ref: ${{ env.REMOTE_BRANCH_NAME }}
          
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
          override: true

      - name: APT update
        run: |
          sudo apt update

      - name: Install target specific tools
        if: matrix.use-cross
        run: |
          sudo apt-get install -y ${{ matrix.linker }}

      - name: Configure target aarch64 GNU
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        ## Environment variable is not passed using env:
        ## LD gold won't work with MUSL
        # env:
        #   JEMALLOC_SYS_WITH_LG_PAGE: 16
        #   RUSTFLAGS: '-Clink-arg=-fuse-ld=gold'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
          echo 'JEMALLOC_SYS_WITH_LG_PAGE=16' >> $GITHUB_ENV
          echo RUSTFLAGS="-Clink-arg=-fuse-ld=gold" >> $GITHUB_ENV

      - name: Configure target aarch64 MUSL
        if: matrix.target == 'aarch64-unknown-linux-musl'
        # env:
        #   JEMALLOC_SYS_WITH_LG_PAGE: 16
        run: |
          sudo apt-get install -y musl-tools
          echo 'JEMALLOC_SYS_WITH_LG_PAGE=16' >> $GITHUB_ENV

      - name: Configure target x86_64 MUSL
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get install -y musl-tools

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.use-cross }}
          args: --release --target ${{ matrix.target }}

      # Strip debuginfo for target aarch64 GNU
      # MUSL binary are static linked
      - name: Strip debuginfo for target aarch64 GNU
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          /usr/bin/aarch64-linux-gnu-strip --strip-debug --target=elf64-littleaarch64 target/${{ matrix.target }}/release/meilisearch -o target/${{ matrix.target }}/release/meilisearch-stripped

      - name: Strip debuginfo for target x86_64 GNU
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          strip --strip-debug target/${{ matrix.target }}/release/meilisearch -o target/${{ matrix.target }}/release/meilisearch-stripped
      
      - name: Create checksum file for the binaries
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum meilisearch | awk '{print $1, "${{matrix.asset_name}}"}' > ${{matrix.asset_name}}.sha256sum
          if [ -e meilisearch-stripped ]; then
             sha256sum meilisearch-stripped | awk '{print $1, "${{matrix.asset_name}}-stripped"}' > ${{matrix.asset_name}}-stripped.sha256sum
          fi  
          
      - name: List target output files
        run: ls -lR ./target

      - name: Upload the binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.PUBLISH_TOKEN }}
          # repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/meilisearch
          asset_name: ${{ matrix.asset_name }}
          ## tag: ${{ github.ref }}
          tag: ${{ env.REMOTE_BRANCH_NAME }}
          prerelease: true
          overwrite: true
          
      - name: Upload stripped binary to release (aarch64/x86_64 GNU only)
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'x86_64-unknown-linux-gnu'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.PUBLISH_TOKEN }}
          # repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/meilisearch-stripped
          asset_name: ${{ matrix.asset_name }}-stripped
          ## tag: ${{ github.ref }}
          tag: ${{ env.REMOTE_BRANCH_NAME }}
          prerelease: true
          overwrite: true

      - name: Upload checksum files to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.PUBLISH_TOKEN }}
          file: target/${{ matrix.target }}/release/*.sha256sum
          file_glob: true
          ## tag: ${{ github.ref }}
          tag: ${{ env.REMOTE_BRANCH_NAME }}
          prerelease: true
          overwrite: true

  build-docker-image:
    # needs: publish-with-crossbuild
    name: Build Docker Images
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      #id-token: write # needed for signing the images with GitHub OIDC **not production ready**
    
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Fetch branch name of latest version
        run: |
          curl -sL https://api.github.com/repos/meilisearch/MeiliSearch/releases | \
          jq -r "map(select(.prerelease)) | first | .tag_name" > /tmp/meilisearch-latest-branch-name
          echo "REMOTE_BRANCH_NAME=$(cat /tmp/meilisearch-latest-branch-name)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: patrickdung/MeiliSearch-crossbuild
          ref: dev
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
        
      - name: Login to Registry provider
        uses: docker/login-action@v1 
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_TOKEN }}
   
      - name: Install Cosign GH action
        uses: sigstore/cosign-installer@main
        #with:
        #  cosign-release: 'v1.4.0'

      # Distroless won't have package managers
      #- name: Verify Distroless image
      #  run: |
      #    cosign verify --key cosign.pub gcr.io/distroless/base-debian11:latest-amd64
      #    cosign verify --key cosign.pub gcr.io/distroless/base-debian11:latest-arm64

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            MEILISEARCH_VERSION=${{ env.REMOTE_BRANCH_NAME }}
            SOURCE_BINARY_BASEURL=https://github.com/patrickdung/MeiliSearch-crossbuild/releases/download
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            registry.gitlab.com/patrickdung/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev
            localhost:5000/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev
            
      - name: Use Cosign to sign the image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          CONTAINER_IMAGE="registry.gitlab.com/patrickdung/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev"
          # Sign the image, the signature is also pushed to the registry
          cosign sign --key ./cosign.key "$CONTAINER_IMAGE"
  
      - name: Use Syft to generate the SBOM
        uses: anchore/sbom-action@v0
        with:
          image: registry.gitlab.com/patrickdung/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev
          artifact-name: container-sbom.spdx.json
          
      - name: Publish SBOM to release package
        uses: anchore/sbom-action/publish-sbom@v0
        with:
          #sbom-artifact-match: 	.*\\.spdx\\.json$
          # ANCHORE_SBOM_ACTION_PRIOR_ARTIFACT: container-sbom.spdx.json
          sbom-artifact-match: ${{env.ANCHORE_SBOM_ACTION_PRIOR_ARTIFACT}}

      - name: Download the container SBOM artifact
        uses: actions/download-artifact@v2
        with:
          name: container-sbom.spdx.json

      - name: Create SBOM attestation
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}
          SBOM_FILE: ./container-sbom.spdx.json
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          CONTAINER_IMAGE="registry.gitlab.com/patrickdung/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev"
          # Create SBOM attestation and push it to the container registry
          cosign attest --predicate "$SBOM_FILE" --key ./cosign.key "$CONTAINER_IMAGE"

      - name: Install Grype
        env:
          GRYPE_VERSION: 0.27.0
        run: |
          cd /tmp
          curl -L -O -v https://github.com/anchore/grype/releases/download/v${GRYPE_VERSION}/grype_${GRYPE_VERSION}_linux_amd64.deb
          curl -L -O -v https://github.com/anchore/grype/releases/download/v${GRYPE_VERSION}/grype_${GRYPE_VERSION}_checksums.txt
          sha256sum -c grype_${GRYPE_VERSION}_checksums.txt --ignore-missing
          sudo dpkg -i grype_${GRYPE_VERSION}_linux_amd64.deb

      - name: Scan container by Grype
        run: |
          # May set a severity threshold for failing the build
          grype sbom:./container-sbom.spdx.json -o json > ./vulnerabilities-report-grype.json
          grype sbom:./container-sbom.spdx.json -o table > ./vulnerabilities-report-grype-table.txt

      - name: Upload Grype report from artifiacts
        uses: actions/upload-artifact@v2
        with:
          path: ./vulnerabilities-report-grype*
          name: "Vulnerabilities report by Grype"

      - name: Scan container by Anchore
        uses: anchore/scan-action@v3
        id: scan-by-anchore
        with:
          fail-build: false
          image: "localhost:5000/docker-images/meilisearch:${{ env.REMOTE_BRANCH_NAME }}-dev"
          acs-report-enable: true
          
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan-by-anchore.outputs.sarif }}

      #- name: Setup Polaris
      #  uses: fairwindsops/polaris@master
      #- name: Check k8s resources by Polaris
      #  run: polaris
